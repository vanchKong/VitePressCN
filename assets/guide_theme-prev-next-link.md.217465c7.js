import{_ as e,o as a,c as n,a as s}from"./app.21c5d987.js";const m=JSON.parse('{"title":"上（下）一篇","description":"","frontmatter":{},"headers":[{"level":2,"title":"prev","slug":"prev","link":"#prev","children":[]},{"level":2,"title":"next","slug":"next","link":"#next","children":[]}],"relativePath":"guide/theme-prev-next-link.md","lastUpdated":1673125712000}'),l={name:"guide/theme-prev-next-link.md"},t=s(`<h1 id="prev-next-link" tabindex="-1">上（下）一篇 <a class="header-anchor" href="#prev-next-link" aria-hidden="true">#</a></h1><p>你可以自定义上（下）一篇链接的文本。如果 你想在 上（下）一篇 链接上显示与侧边栏上不同的文本(默认显示侧边栏的文本)，这将很有帮助。</p><h2 id="prev" tabindex="-1">prev <a class="header-anchor" href="#prev" aria-hidden="true">#</a></h2><ul><li><p>类型： <code>string</code></p></li><li><p>更多：</p><p>指定要在指向上一篇的链接上显示的文本。</p><p>如果你没有在 frontmatter 中设置它，文本默认显示为侧边栏的文本。</p></li><li><p>例：</p></li></ul><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">---</span></span>
<span class="line"><span style="color:#F07178;">prev</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Get Started | Markdown</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">---</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="next" tabindex="-1">next <a class="header-anchor" href="#next" aria-hidden="true">#</a></h2><ul><li><p>类型： <code>string</code></p></li><li><p>更多：</p><p>与 <code>prev</code> 相同，但用于下一篇。</p></li></ul>`,7),p=[t];function r(i,o,c,d,h,_){return a(),n("div",null,p)}const v=e(l,[["render",r]]);export{m as __pageData,v as default};

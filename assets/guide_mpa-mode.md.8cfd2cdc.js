import{_ as n,H as p,o as l,c as o,C as a,a as s,J as t,V as c}from"./chunks/framework.6214194c.js";const b=JSON.parse('{"title":"MPA 模式","description":"","frontmatter":{},"headers":[],"relativePath":"guide/mpa-mode.md","filePath":"guide/mpa-mode.md","lastUpdated":1681591701000}'),r={name:"guide/mpa-mode.md"},i={id:"mpa-mode",tabindex:"-1"},d=a("a",{class:"header-anchor",href:"#mpa-mode","aria-label":'Permalink to "MPA 模式 <Badge type="warning" text="实验性的" /> {#mpa-mode}"'},"​",-1),D=c(`<p>可以通过命令行输入 <code>vitepress build --mpa</code> 或在配置文件中指定 <code>mpa: true</code> 配置选项来启用 MPA (Multi-Page Application) 模式。</p><p>在 MPA 模式下，所有页面都会默认不包含任何 JavaScript。因此，站点可能评估工具中获得更好的初始访问性能分数。</p><p>但是，由于 SPA 导航的缺失，跨页面链接将导致重新加载整个页面。MPA 模式下的导航不会像 SPA 模式那样立即响应。</p><p>同时请注意，默认情况下不使用 JavaScript 意味着你实际上只是将 Vue 作为服务器端模板语言。浏览器不会附加任何事件处理程序，因此将不会有任何交互性。要加载客户端 JavaScript，你需要使用特殊的 <code>&lt;script client&gt;</code> 标签：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">client</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">h1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">client side JavaScript!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"># Hello {#hello}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>&lt;script client&gt;</code> 是 VitePress 独有的功能，而不是 Vue 的功能。它可以在 <code>.md</code> 和 <code>.vue</code> 文件中使用，但只能在 MPA 模式下使用。所有主题组件中的客户端脚本将被打包在一起，而特定页面的客户端脚本将会分开处理。</p><p>请注意，<code>&lt;script client&gt;</code> <strong>不会被视为 Vue 组件代码</strong>：它会看做普通的 JavaScript 模块来处理。因此，只有在你的站点需要绝对最小的客户端交互性时，才应该使用 MPA 模式。</p>`,7);function F(y,m,A,C,_,u){const e=p("Badge");return l(),o("div",null,[a("h1",i,[s("MPA 模式 "),t(e,{type:"warning",text:"实验性的"}),s(),d]),D])}const h=n(r,[["render",F]]);export{b as __pageData,h as default};
